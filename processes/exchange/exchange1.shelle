#!/bin/sh
#shell script generated by shelle v1.21
DEBUG= #for running
#DEBUG=echo #for debugging
LOCAL=/usr/local
BIN=$LOCAL/elle/bin #location of the Elle applications
STARTFILE=exp2_3_newgg2.elle
TIME=00
LASTTIME=100
TIMESTEP=1
GGSTAGES=0
GSTAGES=0
PBSTAGES=0
USERNAME=elle_exchange
USERSTAGES=500
EXCHSTAGES=1
USERDATA1=30.90528
USERDATA2=0
USERDATA3=
GBDIFFSTAGES=500
GBDIFFKAPPA=2.0e-9
LATTDIFFSTAGES=0
EXPANDAREA=10
EXPANDSPEED=10
MANUELSPEED=0.00
SAVEINTVL=5
SAVEALL=15
BASINFILE=intilt3
ROOTNAME=reaction
GV_SAVE=0
PLOTAX=0
LIST=" 99 20"
# set the input for the first process
   echo copy $STARTFILE to tmp.elle
   $DEBUG /bin/cp $STARTFILE tmp.elle
   if [ $GV_SAVE -eq 1 ]
   then
      echo $BIN/showelleps -i tmp.elle
      $DEBUG $BIN/showelleps -i tmp.elle
   fi
if [ $TIME -eq 0 ]
then
   echo copy $STARTFILE to $ROOTNAME.000.00.elle
   $DEBUG nice /bin/cp $STARTFILE $ROOTNAME.000.00.elle
fi

# do the randomise crystal axes command
for VAL in $LIST
do
case $VAL in
7) FILEROOT7=ran.gns1
   echo $BIN/ranorient -i tmp.elle -s 1 -f 1 -n
   $DEBUG nice $BIN/ranorient -i tmp.elle -s 1 -f 1 -n
   FILEROOT=$FILEROOT7
   echo copy $FILEROOT.elle to tmp.elle
   $DEBUG nice /bin/cp $FILEROOT.elle tmp.elle
   echo move $FILEROOT.elle to $ROOTNAME.000.01.elle
   $DEBUG nice /bin/mv $FILEROOT.elle $ROOTNAME.000.01.elle
;;
esac
done

# loop through until time is up
ERROR=0
while [ $TIME -lt $LASTTIME -a $ERROR -eq 0 ]
do
# update time variable
   TIME=`expr $TIME + $TIMESTEP`
   if [ `expr $TIME \< 10` -gt 0 ]
   then
    TIME=0$TIME
   fi
   if [ `expr $TIME \< 100` -gt 0 ]
   then
    TIME=0$TIME
   fi
echo TIME=$TIME

# run the loop
for VAL in $LIST
do
   unset COMMAND
   unset SAVE
   unset SAVE2
   unset SAVE3
   unset SAVEBASIL
   unset COPYPROCESS
   unset COPYPROCESS2
   unset PROCID
# set the command
case $VAL in

# create the polygon input from the elle file
1) PROCESS1=$BIN/elle2poly #process 1
   PARAMETERS1="tmp.elle tmp.poly pb" #input for process 1
   COMMAND="$PROCESS1 $PARAMETERS1"
   PROCID=01
   ;;

# run basil
2) PROCESS2=$LOCAL/basil/bin/basil #process 2
   PARAMETERS2=$BASINFILE #input for process 2
   COMMAND="$PROCESS2 $PARAMETERS2"
   SAVEBASIL="/bin/cp FD.sols/basil FD.sols/$ROOTNAME.$TIME"
   SAVE2="/bin/cp FD.out/basil.out FD.out/$ROOTNAME.out.$TIME"
   PROCID=02
   ;;

# convert to elle format
3) PROCESS3=$BIN/basil2elle #process 3
   PARAMETERS3="-i FD.sols/basil -r 2 -o tmp2.elle"
   COPYPROCESS="/bin/cp tmp2.elle tmp.elle"
   COMMAND="$PROCESS3 $PARAMETERS3"
   SAVE="/bin/mv tmp2.elle $ROOTNAME"
   PROCID=03
   ;;

# let tbh happen
4) PROCESS4=$BIN/elle_tbh #process 4
   PARAMETERS4="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT4=tbh.calc1
   SAVEPROCESS4="/bin/mv $FILEROOT4.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT4.elle tmp.elle"
   SAVE3="$BIN/plotaxes -i $ROOTNAME"
   COMMAND="$PROCESS4 $PARAMETERS4"
   SAVE=$SAVEPROCESS4
   FILEROOT=$FILEROOT4
   PROCID=04
   ;;

# let grains split into subgrains
5) PROCESS5=$BIN/elle_split #process 5
   PARAMETERS5="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT5=split1
   SAVEPROCESS5="/bin/mv $FILEROOT5.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT5.elle tmp.elle"
   COMMAND="$PROCESS5 $PARAMETERS5"
   SAVE=$SAVEPROCESS5
   FILEROOT=$FILEROOT5
   PROCID=05
   ;;

# let grains boundaries migrate by everything
6) PROCESS6=$BIN/elle_gbm #process 6
   PARAMETERS6="-i tmp.elle -s $GSTAGES -f $GSTAGES -n"
   FILEROOT6=gbm
   SAVEPROCESS6="/bin/mv $FILEROOT6$GSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT6$GSTAGES.elle tmp.elle"
   COMMAND="$PROCESS6 $PARAMETERS6"
   SAVE=$SAVEPROCESS6
   FILEROOT=$FILEROOT6
   PROCID=06
   ;;

# grow pblast
8) PROCESS8=$BIN/elle_pblast #process 8
   PARAMETERS8="-i tmp.elle -s $PBSTAGES -f $PBSTAGES -n"
   FILEROOT8=pblast
   SAVEPROCESS8="/bin/mv $FILEROOT8$PBSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT8$PBSTAGES.elle tmp.elle"
   COMMAND="$PROCESS8 $PARAMETERS8"
   SAVE=$SAVEPROCESS8
   FILEROOT=$FILEROOT8
   PROCID=08
   ;;

# do oof calculation
9) PROCESS9=$BIN/batch_oof #process 9
   COMMAND="$PROCESS9 "
   FILEROOT9=goof2elle1
   SAVEPROCESS9="/bin/mv $FILEROOT9.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT9.elle tmp.elle"
   SAVE=$SAVEPROCESS9
   FILEROOT=$FILEROOT9
   PROCID=09
   ;;

# let let nucleation/recrystallisation happen if dislocden is high enough
10) PROCESS10=$BIN/elle_disloc_rx #process 10
   PARAMETERS10="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT10=disloc_rx1
   SAVEPROCESS10="/bin/mv $FILEROOT10.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT10.elle tmp.elle"
   COMMAND="$PROCESS10 $PARAMETERS10"
   SAVE=$SAVEPROCESS10
   FILEROOT=$FILEROOT10
   PROCID=10
   ;;

# let rotation recrystallisation on only split flynns happen
11) PROCESS11=$BIN/elle_angle_rx #process 11
   PARAMETERS11="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT11=angle_rx1
   SAVEPROCESS11="/bin/mv $FILEROOT11.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT11.elle tmp.elle"
   COMMAND="$PROCESS11 $PARAMETERS11"
   SAVE=$SAVEPROCESS11
   FILEROOT=$FILEROOT11
   PROCID=11
   ;;

# let grains recover
12) PROCESS12=$BIN/elle_recovery #process 12
   PARAMETERS12="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT12=recover1
   SAVEPROCESS12="/bin/mv $FILEROOT12.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT12.elle tmp.elle"
   COMMAND="$PROCESS12 $PARAMETERS12"
   SAVE=$SAVEPROCESS12
   FILEROOT=$FILEROOT12
   PROCID=12
   ;;

# let repositioning happen
13) PROCESS13=$BIN/reposition #process 13
   PARAMETERS13="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT13=repos
   SAVEPROCESS13="/bin/mv $FILEROOT13.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT13.elle tmp.elle"
   COMMAND="$PROCESS13 $PARAMETERS13"
   SAVE=$SAVEPROCESS13
   FILEROOT=$FILEROOT13
   PROCID=13
   ;;

# do statistics
14) PROCESS14=$BIN/statistics #process 14
   PARAMETERS14="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT14=merge1
   SAVEPROCESS14="/bin/mv $FILEROOT14.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT14.elle tmp.elle"
   COMMAND="$PROCESS14 $PARAMETERS14"
   SAVE=$SAVEPROCESS14
   FILEROOT=$FILEROOT14
   PROCID=14
   ;;

# check for small angle vertices
15) PROCESS15=$BIN/checkangle #process 15
   PARAMETERS15="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT15=checkangle1
   SAVEPROCESS15="/bin/mv $FILEROOT15.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT15.elle tmp.elle"
   COMMAND="$PROCESS15 $PARAMETERS15"
   SAVE=$SAVEPROCESS15
   FILEROOT=$FILEROOT15
   PROCID=15
   ;;

# recalculate viscosity
16) PROCESS16=$BIN/elle_viscosity #process 16
   PARAMETERS16="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT16=viscosity1
   SAVEPROCESS16="/bin/mv $FILEROOT16.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT16.elle tmp.elle"
   COMMAND="$PROCESS16 $PARAMETERS16"
   SAVE=$SAVEPROCESS16
   FILEROOT=$FILEROOT16
   PROCID=16
   ;;

# let grains merge
17) PROCESS17=$BIN/elle_merge #process 17
   PARAMETERS17="-i tmp.elle -s 1 -f 1 -n"
   FILEROOT17=merge1
   SAVEPROCESS17="/bin/mv $FILEROOT17.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT17.elle tmp.elle"
   COMMAND="$PROCESS17 $PARAMETERS17"
   SAVE=$SAVEPROCESS17
   FILEROOT=$FILEROOT17
   PROCID=17
   ;;

# let grains boundaries migrate by surface energy
18) PROCESS18=$BIN/elle_gg #process 18
   PARAMETERS18="-i tmp.elle -s $GGSTAGES -f $GGSTAGES -n"
   FILEROOT18=growth
   SAVEPROCESS18="/bin/mv $FILEROOT18$GGSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT18$GGSTAGES.elle tmp.elle"
   COMMAND="$PROCESS18 $PARAMETERS18"
   SAVE=$SAVEPROCESS18
   FILEROOT=$FILEROOT18
   PROCID=18
   ;;

# grow pblast by expand algorithm
19) PROCESS19=$BIN/elle_expand #process 8
   PARAMETERS19="-i tmp.elle -s $PBSTAGES -f $PBSTAGES -u $EXPANDAREA
$EXPANDSPEED 0 -n"
   FILEROOT19=expand
   SAVEPROCESS19="/bin/mv $FILEROOT19$PBSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT19$PBSTAGES.elle tmp.elle"
   COMMAND="$PROCESS19 $PARAMETERS19"
   SAVE=$SAVEPROCESS19
   FILEROOT=$FILEROOT19
   PROCID=19
   ;;

# gb diffussion
20) PROCESS20=$BIN/elle_gbdiff #process 8
   PARAMETERS20="-i tmp.elle -s $GBDIFFSTAGES -f $GBDIFFSTAGES -u
$GBDIFFKAPPA -n"
   FILEROOT20=gbdiff
   SAVEPROCESS20="/bin/mv $FILEROOT20$GBDIFFSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT20$GBDIFFSTAGES.elle tmp.elle"
   COMMAND="$PROCESS20 $PARAMETERS20"
   SAVE=$SAVEPROCESS20
   FILEROOT=$FILEROOT20
   PROCID=20
   ;;

# lattice diffusion
21) PROCESS21=$BIN/elle_diff #process 8
   PARAMETERS21="-i tmp.elle -s $LATTDIFFSTAGES -f $LATTDIFFSTAGES -n"
   FILEROOT21=diff
   SAVEPROCESS21="/bin/mv $FILEROOT21$LATTDIFFSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT21$LATTDIFFSTAGES.elle tmp.elle"
   COMMAND="$PROCESS21 $PARAMETERS21"
   SAVE=$SAVEPROCESS21
   FILEROOT=$FILEROOT21
   PROCID=21
   ;;

# let homogenoeus simple shear happen
22) PROCESS22=$BIN/elle_manuel #process 13
   PARAMETERS22="-i tmp.elle -s 1 -f 1 -v $MANUELSPEED -n"
   FILEROOT22=manuel1
   SAVEPROCESS22="/bin/mv $FILEROOT22.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT22.elle tmp.elle"
   COMMAND="$PROCESS22 $PARAMETERS22"
   SAVE=$SAVEPROCESS22
   FILEROOT=$FILEROOT22
   PROCID=22
   ;;

# userdefined algorithm
99) PROCESS99=$BIN/elle_exchange #process 99
   PARAMETERS99="-i tmp.elle -s $USERSTAGES -f $EXCHSTAGES -u $USERDATA1 $USERDATA2 $USERDATA3 -n"
   FILEROOT99=exchng00
   SAVEPROCESS99="/bin/mv $FILEROOT99$EXCHSTAGES.elle $ROOTNAME"
   COPYPROCESS="/bin/cp $FILEROOT99$EXCHSTAGES.elle tmp.elle"
   COMMAND="$PROCESS99 $PARAMETERS99"
   SAVE=$SAVEPROCESS99
   FILEROOT=$FILEROOT99
   PROCID=99
   ;;

esac

# run the command
if [ $ERROR -eq 0 ]
then
   echo ${COMMAND}
   $DEBUG nice ${COMMAND}
   if [ $? != 0 ]
   then
      ERROR=1
   fi

   if [ "$COPYPROCESS" ]
   then
      echo ${COPYPROCESS}
      $DEBUG ${COPYPROCESS}
   fi

   if [ $? != 0 ]
   then
      ERROR=1
   fi

   if [ "$COPYPROCESS2" ]
   then
      echo ${COPYPROCESS2}
      $DEBUG ${COPYPROCESS2}
   fi

   if [ $? != 0 ]
   then
      ERROR=1
   fi

fi
# save files, if requested interval and save command set

if [ `expr $TIME % $SAVEINTVL` -eq 0 -o ${PROCID} -eq ${SAVEALL} ]
then
if [ $ERROR -eq 0 ]
then
   if [ "$SAVE" ]
   then
      if [ $GV_SAVE -eq 1 ]
      then
         echo $BIN/showelleps -i tmp.elle
         $DEBUG $BIN/showelleps -i tmp.elle
      fi
      echo $SAVE.$TIME.$PROCID.elle
      $DEBUG $SAVE.$TIME.$PROCID.elle
   fi

   if [ $? != 0 ]
   then
      ERROR=1
   fi

   if [ "$SAVE2" ]
   then
      echo ${SAVE2}
      $DEBUG ${SAVE2}
   fi

   if [ "$SAVEBASIL" ]
   then
      echo ${SAVEBASIL}
      $DEBUG ${SAVEBASIL}
   fi

   if [ $? != 0 ]
   then
      ERROR=1
   fi

   if [ $PLOTAX -eq 1 ]
   then
      echo $SAVE3.$TIME.$PROCID.elle -s 1 -f 1 -n
      $DEBUG $SAVE3.$TIME.$PROCID.elle -s 1 -f 1 -n
   fi
fi
fi
done
done
exit $ERROR
