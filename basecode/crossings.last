 /*****************************************************
 * Copyright: (c) L. A. Evans
 * File:      $RCSfile: crossings.last,v $
 * Revision:  $Revision: 1.1.1.1 $
 * Date:      $Date: 2002/09/18 03:18:04 $
 * Author:    $Author: levans $
 *
 ******************************************************/
#include <stdio.h>
#include <math.h>
#include "interface.h"
#include "nodes.h"
#include "check.h"
#include "crossings.h"
#include "error.h"
#include "polygon.h"
#include "convert.h"
#include "general.h"
#include "bflynns.h"

/*****************************************************

static const char rcsid[] =
       "$Id: crossings.last,v 1.1.1.1 2002/09/18 03:18:04 levans Exp $";

******************************************************/

void ElleReplaceTripleJ( Intersection *intersect, int *dj,int num);
void ElleReplaceDoubleJ(Intersection *intersect,int num);
void ElleCheckTJAngles(int node, Coords *newxy, Angle_data *ang, int *count);
void InitAngleData(Angle_data *ang);

int ElleCrossingsCheck(int node, Coords *pos_incr)
{
    int nbnodes[3], tmpnbs[3], i, j, angcnt=0, count=0, segcount=0;
    int nb, pivot, newdj[3];
    int rgn_checked[6],c=0,checked=0;
    int rearranged=0, triflynn=0, *list, move=1, start;
    double dist[3];
    double area1, area2;
    Coords newxy, currxy, nbxy, prevxy, checkpt;
    Angle_data ang[3];
    Intersection intersect[MAX_I_CNT], isectsegs[MAX_I_CNT], tmp;
    ERegion rgn, rgn2, nbrgns[3], chk_rgn;

    
#if XY
#endif

    for (i=0;i<MAX_I_CNT;i++) {
        InitIntersection(&intersect[i]);
        InitIntersection(&isectsegs[i]);
    }
    for (i=0;i<3;i++) InitAngleData(&ang[i]);

    ElleNodePosition(node,&currxy);
    newxy.x = currxy.x + pos_incr->x;
    newxy.y = currxy.y + pos_incr->y;
    /*
     * check whether the node movement causes an angle flip
     */
    ElleCheckAngles(node,&newxy,ang,&angcnt);

    if (!angcnt && ElleNodeIsTriple(node)) {
        ElleCheckTJAngles(node,&newxy,ang,&angcnt);
        if (angcnt==1) {
            ElleMoveLink(0,&ang[0],0);
            printf("moving TJ\n");
            return(0);
        }
        else if (angcnt>1) {
            printf("Not moving TJ\n");
            return(1);
        }
    }

    ElleNeighbourNodes(node,nbnodes);
    /*
     * for each neighbouring region
     * check whether the node moves across a segment
     */
    ElleRegions(node,nbrgns);
    for (i=0;i<3;i++) {
        if (nbrgns[i]!=NO_NB) {
            ElleNeighbourRegion(node,nbnodes[i],&rgn);
            if (j=ElleFindIntersection(node,NO_NB,nbrgns[i],&currxy,
                                     &newxy,&intersect[count]))
                count+=j;
            ElleNeighbourRegion(nbnodes[i],node,&rgn);
            if (j=ElleFindIntersection(node,nbnodes[i],rgn,&currxy,
                                     &newxy,&intersect[count]))
                count+=j;
        }
    }
    if (count==0) {
        for (i=0;i<3;i++) {  /* for each segment */
            if (nbnodes[i]!=NO_NB) {
                ElleNodePlotXY(nbnodes[i],&nbxy,&currxy);
                ElleNeighbourRegion(node,nbnodes[i],&rgn);
                if (j=ElleFindIntersection(node,nbnodes[i],rgn,&newxy,
                                        &nbxy, &intersect[count])) 
                    count+=j;
                ElleNeighbourRegion(nbnodes[i],node,&rgn);
                if (j=ElleFindIntersection(node,nbnodes[i],rgn,&newxy,
                                         &nbxy,&intersect[count]))
                    count+=j;
            }
        }
    }
    else if (ElleNodeIsTriple(node)) {
        checkpt.x = currxy.x + pos_incr->x*0.1;
        checkpt.y = currxy.y + pos_incr->y*0.1;
        chk_rgn=NO_NB;
        for (i=0,checked=0;i<3&&!checked;i++) {  /* for each region */
            if (nbnodes[i]!=NO_NB) {
                ElleNeighbourRegion(node,nbnodes[i],&rgn);
                if (EllePtInRegion(rgn,&checkpt)) {
                    checked=1;
                    chk_rgn=rgn;
                }
                else {
                    ElleNeighbourRegion(nbnodes[i],node,&rgn);
                    if (EllePtInRegion(rgn,&checkpt)) {
                        checked=1;
                        chk_rgn=rgn;
                    }
                }
            }
        }
        if (chk_rgn==NO_NB) OnError("no region to check",0);
        /*
         * do segments in order of rgn bnd
         */
        for (i=0;i<3;i++) {
            ElleNeighbourRegion(node,nbnodes[i],&rgn);
            ElleNeighbourRegion(nbnodes[i],node,&rgn2);
            if (rgn!=chk_rgn) {
                if (rgn2!=chk_rgn) tmpnbs[1]=nbnodes[i];
                else tmpnbs[2] = nbnodes[i];
            }
            else tmpnbs[0] = nbnodes[i];
        }
        for (i=0;i<3;i++) {  /* for each segment */
            if (tmpnbs[i]!=NO_NB) {
                ElleNodePlotXY(tmpnbs[i],&nbxy,&currxy);
                if (j=ElleFindIntersection(node,tmpnbs[i],chk_rgn,&newxy,
                                             &nbxy,&isectsegs[segcount]))
                        segcount+=j;
            }
        }
    }
    j = 0;
    if (count>1) {
        /*
         * find the closest intersection
         */
        for (i=0;i<count;i++)
            dist[i] = (intersect[i].xingpt.x - currxy.x) *
                      (intersect[i].xingpt.x - currxy.x) +
                      (intersect[i].xingpt.y - currxy.y) *
                      (intersect[i].xingpt.y - currxy.y);
        i=1;
        while (i<count) {
            if (dist[i] < dist[j]) j=i;
            i++;
        }
    }
    if (angcnt) {
        /*
         * angle pivot without vector or segment crossing
         */
        if (count) {
            /*if (ElleNodeIsDouble(intersect[j].pivot))*/
                /*ElleDeleteDoubleJ(intersect[j].pivot);*/
            /*else {*/
            /*
             * move link
             */
                ElleMoveLink(&intersect[j],&ang[0],&newxy);
                rearranged = 1;
            /*}*/
        }
        else {
        /*
         * triangular grain closing on itself?
         */
        triflynn=0;
        ElleNeighbourRegion(node,ang[0].pivot,&rgn);
         /*
          * can flynns with more than 5 nodes invert?
          * what is a test for any flynn inverting?
          */
        if (ElleFlynnNodeCount(rgn)<6) {
            ElleNeighbourRegion(ang[0].pivot,node,&rgn2);
            triflynn=1;
        }
        else {
            ElleNeighbourRegion(ang[0].pivot,node,&rgn);
            if (ElleFlynnNodeCount(rgn)<6) {
                ElleNeighbourRegion(node,ang[0].pivot,&rgn2);
                triflynn=1;
            }
        }
        if (triflynn) {
            area1 = ElleRegionArea(rgn);
            ElleNodePrevPosition(node,&prevxy);
            ElleSetPosition(node,&newxy);
            area2 = ElleRegionArea(rgn);
            ElleSetPosition(node,&currxy);
            ElleSetPrevPosition(node,&prevxy);
            if (area2 < area1 || area1 < 0) {
                /*
                 * flynn inverting
                 */
                ElleMergeFlynnsNoCheck(rgn2,rgn);
                count=0;
            }
        }
        else {
         /*
          * angle very small and closing but not quite intersect
          * assume it has closed
          */
            ElleMoveLink(0,&ang[0],0);
        }
        }
#if XY
#endif
    }
    else if (count>0) {
        if (ElleNodeIsTriple(node)) {
            if (ElleNodeIsActive(node)) writeNodeLocalPolyFile(node);
            if (segcount) {
                ElleReplaceTripleJ(isectsegs,newdj,segcount);
#ifdef DEBUG
                if (ElleNodeIsActive(newdj[0])) writeNodeLocalPolyFile(newdj[0]);
#endif
            }
        }
        else  {
            if (ElleNodeIsActive(node)) writeNodeLocalPolyFile(node);
            ElleReplaceDoubleJ(&intersect[j],count);
            if (ElleNodeIsActive(node)) writeNodeLocalPolyFile(node);
        }
    }
    else {
       /*
        * move the node
        */
        ElleUpdatePosition(node,pos_incr);
    }
    if (rearranged) {
        if (ElleNodeIsDouble(node)) ElleCheckDoubleJ(node);
        else if (ElleNodeIsTriple(node)) ElleCheckTripleJ(node);
        if (ElleNodeIsActive(node))    writeNodeLocalPolyFile(node);
    }
    return(0);
}

void ElleMoveLink(Intersection *intersect, Angle_data *ang,
                  Coords *newxy)
{
    int node,nnew,i;
    int curr,end,nbnodes[3];
    Coords midpt, xy;
    ERegion rgn1,rgn2,rgn,oldrgn,nbrgn,tmp[3];
    /*
     * insert a new DJ in the intersected segment ( at
     * crossing point ) and change the boundaries so 
     * the node is joined to the new node instead of 
     * the pivotted node
     */
    if (intersect) node = intersect->node1a;
    else node = ang->node;
    ElleNeighbourRegion(node,ang->pivot,&rgn1);
    ElleNeighbourRegion(ang->pivot,node,&rgn2);
    ElleNeighbourRegion(ang->pivot,ang->nb,&nbrgn);
    if (intersect) {
        ElleInsertDoubleJ(intersect->node1b,intersect->node2b,&nnew,0.5);
        ElleSetPosition(nnew,&intersect->xingpt);
        ElleSetPrevPosition(nnew,&intersect->xingpt);
    }
    else {
        ElleInsertDoubleJ(ang->pivot,ang->nb,&nnew,0.5);
    }
    ElleNeighbourRegion(node,ang->pivot,&rgn1);
    /*if (EllePtInRegion(rgn1,newxy)) {*/
    /*if (rgn1==nbrgn && !ElleNodeIsDouble(ang->pivot)) {*/
    if (rgn1==nbrgn) {
        curr = ang->pivot;
        end = nnew;
        rgn = rgn2;
        oldrgn = rgn1;
    }
    else {
        curr = nnew;
        end = ang->pivot;
        rgn = rgn1;
        oldrgn = rgn2;
    }
    if ((i = ElleFindNbIndex(ang->pivot,node))==NO_NB)
        OnNodeError(node,"ElleMoveLink",NONB_ERR);
    /*
     * nnew is a new node so this will be the third entry and
     * loop below will find the other nb with rgn2 before node
     */
    ElleSetNeighbour(nnew,NO_NB,node,&rgn2);
    ElleSetNeighbour(node,i,nnew,0);
    if ((i = ElleFindNbIndex(node,ang->pivot))==NO_NB)
        OnNodeError(node,"ElleMoveLink",NONB_ERR);
    ElleClearNeighbour(ang->pivot,i);
    if (ElleNodeIsSingle(ang->pivot)) {
        ElleDeleteSingleJ(ang->pivot);
        if (end==ang->pivot) end = ang->nb;
        else curr = ang->nb;
    }
    if (ElleNodeIsTriple(nnew)) {
        while (curr!=end) {
            ElleNeighbourNodes(curr,nbnodes);
            if ((i=ElleFindBndIndex(curr,oldrgn))!=NO_NB){
                ElleSetRegionEntry(curr,i,rgn);
                ElleUpdateFirstNodes(curr,nnew, oldrgn);
                curr = nbnodes[i];
            }
        }
        if (end==ang->pivot) ElleUpdateFirstNodes(end,nnew,oldrgn);
    }
}

void ElleReplaceTripleJ( Intersection *intersect,int *dj,int num)
{
    /*
     * assumes they are in order for the same chk_rgn
     */
    int node,  nb, i, j, index, nbindex;
    int subst, rgns[3], nbs[3];
    float frac = 0.5;
    double eps;
    ERegion rgn, nbrgn, newrgn;

    eps = 1.0e-6;
    node = intersect[0].node1a;
    frac = 1.0/num;
    for (i=0;i<num;i++) {
        /*
         * replace nb - node with nb - newnode at xingpt
         */
        nb = intersect[i].node2a;
        if ((index = ElleFindNbIndex(node,nb))==NO_NB)
            OnNodeError(node,"ReplaceTripleJ",NONB_ERR);
        ElleNeighbourRegion(node,nb,&rgn);
        ElleNeighbourRegion(nb,node,&nbrgn);
        if ((nbindex = ElleFindNbIndex(nb,node))==NO_NB)
            OnNodeError(node,"ReplaceTripleJ",NONB_ERR);
        ElleInsertDoubleJ(intersect[i].node1b,intersect[i].node2b,
                                  &dj[i],1.0/(num-i+1));
        ElleSetRegionEntry(dj[i],ElleFindNbIndex(intersect[i].node2b,dj[i])
                                               ,nbrgn);
        ElleSetNeighbour(nb,index,dj[i],0);
        ElleSetNeighbour(dj[i],NO_NB,nb,&rgn);
        if (i==num-1) {
            ElleNewGrain(dj[i],nb,intersect[i].chk_rgn,&newrgn);
            ElleSetFlynnFirstNode(intersect[i].chk_rgn,dj[0]);
        }
        else {
            subst = intersect[i].node1b;
            for (j=i+1;j<num;j++)
                if (intersect[j].node1b==subst) intersect[j].node1b=dj[i];
        }
        ElleUpdateFirstNodes(node,nb,nbrgn);
        ElleClearNeighbour(node,nbindex);
        if (i>0 && num>1) {
            ElleRegions(dj[i-1],rgns);
            ElleNeighbourNodes(dj[i-1],nbs);
            int done=0; int tmp = dj[i-1];
            for (j=0;j<3 && !done;j++) {
                if (rgns[j]==rgn && nbs[j]!=nb) {
                    if (nbs[j]!=dj[i])
                        ResetRegionEntries(nbs[j],&tmp,dj[i],
                                       intersect[i].chk_rgn, rgn);
                    done=1;
                }
            }
        }
    }
    if (ElleNodeIsActive(node) && ElleNodeIsSingle(node))
        ElleDeleteSingleJ(node);
        
}


void ElleReplaceDoubleJ( Intersection *intersect,int num)
{
    int node, nbnodes[3], nnew, i;
    double eps;
    double diffx, diffy;
    Coords midpt, xy;
    ERegion rgn, nbrgns[3], newrgn;

    eps = 1.0e-6;
    node = intersect->node1a;
    /*ElleNodePosition(node,&xy);*/
    ElleNodePlotXY(node,&xy,&(intersect->xingpt));
    /*
     * if node is very close to crossing point, do nothing
     */
    diffx = (double)xy.x - intersect->xingpt.x;
    diffy = (double)xy.y - intersect->xingpt.y;
    if (fabs(diffx)<eps && fabs(diffy)<eps) {
        fprintf(stderr,"Trouble %d seg %d %d\n",node,
                             intersect->node1b,intersect->node2b);
    }
    /*else {*/
        /*
         * find the regions on either side of the crossed segment
         * intersect->chk_rgn is intersect->node1b to intersect->node2b
         */
        ElleNeighbourRegion(intersect->node2b,intersect->node1b,&rgn);
        midpt.x = xy.x - (xy.x - intersect->xingpt.x)*0.5;
        midpt.y = xy.y - (xy.y - intersect->xingpt.y)*0.5;
        if (EllePtInRegion(intersect->chk_rgn,&midpt))
            rgn = intersect->chk_rgn;
        ElleInsertDoubleJ(intersect->node1b,intersect->node2b,&nnew,0.5);
        ElleSetPosition(nnew,&(intersect->xingpt));
        ElleSetPrevPosition(nnew,&(intersect->xingpt));
        ElleNewGrain(node,nnew,rgn,&newrgn);
        ElleSwitchTripleNodesForced(node,nnew);
    /*}*/
}

int ElleFindIntersection(int node1, int nb, ERegion rgn, Coords *strt_pos,
                          Coords *end_pos, Intersection *intersect)
{
    char msg[80];
    int i, j, k, found = 0, inb, start=NO_NB, num_segs, count=0;
    int *id, num_nodes;
    Coords xy,prev,last;
    double x1, y1, x2, y2, x3, y3, x4, y4, x, y;

    sprintf(msg,"%s %d %d Region=%d ",
                    "ElleFindIntersection", node1, nb, rgn);
    /*
     * get the list of nodes - work on lowest child level
     * set x1 y1(node pos) x2 y2(node prev pos) x3 y3(start)
     */
    prev = *strt_pos;
    ElleFlynnNodes(rgn,&id,&num_nodes);
    /*ElleUnitNodes(rgn,&id,&num_nodes);*/
    /*ElleNodePosition(node1,&prev);*/
    /*ElleNodePlotXY(node1,&xy,&prev);*/
    x1 = end_pos->x;
    y1 = end_pos->y;
    x2 = prev.x;
    y2 = prev.y;
    /*
     * find the node for the first segment to be checked
     * node1---nb---start   or  nb---node1---start
     */
    i=0; start = node1;
    last = prev;
    while (i<num_nodes && id[i]!=start) i++;
    i = (i+1) % num_nodes;
    if (nb!=NO_NB && id[i] == nb) i = (i+1) % num_nodes;
    inb = (i+1) % num_nodes;
    ElleNodePlotXY(id[i],&xy,&last);
    x3 = xy.x;
    y3 = xy.y;
    last=xy;
    num_segs = num_nodes-2;
    if (nb!=NO_NB)
        num_segs = num_nodes-3; /* don't check requested segment
                                 * or it's neighbour segments */
    /*
     * check this region for intersections with x1,y1---x2,y2
     */
    for (j=0;j<num_segs /*&& !found*/;j++) {
        ElleNodePlotXY(id[inb],&xy,&prev);
        x4 = xy.x;
        y4 = xy.y;
        prev=xy;
        k=lines_intersect(x1,y1,x2,y2,x3,y3,x4,y4,&x,&y);
        /*if (k==2) printf("colinear\n");*/
        if (k==1) {
#ifdef DEBUG
           printf("intersect %d %d %d %d region %d\n",
                   node1,nb,id[i],id[inb],rgn);
#endif
           /* set values */ 
           intersect[count].node1a = node1;
           intersect[count].node2a = nb;
           intersect[count].node1b = id[i];
           intersect[count].node2b = id[inb];
           intersect[count].xingpt.x = x;
           intersect[count].xingpt.y = y;
           intersect[count].chk_rgn = rgn;
           found = 1;
           if (count<MAX_I_CNT-1) count++;
           else OnError("FindIntersection",RANGE_ERR);
        }
        i = inb;
        inb = (i+1) % num_nodes;
        x3 = x4; y3 = y4;
    }
    if (id) free(id);
    return(count);
}

void ElleCheckAngles(int node, Coords *newxy, Angle_data *ang, int *count)
{
    int i,j;
    int nbnodes[3], nbnbnodes[3];
    int index=0;
    double currang, prevang, min, curr;
    float eps, angeps = 0.0087; /* 1deg */
    double sep1, sep2;
    Coords tmp2, xy, prev;
    /*
     * compare current angle with that before node moved
     * if sign changes, set pvt and nb and angle
     */

    eps = 1.0e-6;
    *count = 0;
    ElleNodePosition(node,&prev);
    ElleNeighbourNodes(node,nbnodes);
    for (i=0;i<3 /*&& *count==0*/;i++) {
        if (nbnodes[i]!=NO_NB) {
            ElleNeighbourNodes(nbnodes[i],nbnbnodes);
            ElleNodePlotXY(nbnodes[i],&xy,&prev);
            for (j=0;j<3;j++) {
                if (nbnbnodes[j]!=NO_NB && nbnbnodes[j]!=node) {
                    ElleNodePlotXY(nbnbnodes[j],&tmp2,&prev);
                    if (angle( xy.x,xy.y,tmp2.x,tmp2.y,newxy->x,newxy->y,
                                                             &currang ))
                        OnNodeError(node,"angle error",0);
                    if (angle( xy.x,xy.y,tmp2.x,tmp2.y,prev.x,prev.y,
                                                             &prevang ))
                        OnNodeError(node,"angle error",0);
                    if ((fabs(currang-prevang))<PI &&
                                 ((currang < -eps && prevang > eps) ||
                                  (currang > eps && prevang < -eps)) ||
                                  (fabs(currang) < angeps && 
                                   fabs(currang) < fabs(prevang)) ) {
#ifdef DEBUG
                        printf("ang = %lf, prev = %lf\n",currang,prevang);
#endif
                        ang[*count].pivot = nbnodes[i];
                        ang[*count].nb = nbnbnodes[j];
                        ang[*count].node = node;
                        ang[*count].prev_angle = prevang;
                        (*count)++;
                    }
                }
            }
        }
    }
    if (*count > 1) {
        min = fabs(ang[0].prev_angle);
        index = 0;
        i=1;
        while (i < *count) {
            if (ang[i].pivot!=ang[0].pivot) {
                sep1 = ElleNodeSeparation(node,ang[i].pivot);
                sep2 = ElleNodeSeparation(node,ang[0].pivot);
                if (sep1 < sep2) index = i;
            }
            else {
                curr = fabs(ang[i].prev_angle);
                if (curr < min) {
                    min = curr;
                    index = i;
                }
            }
            i++;
        }
        /*
         * copy the data for the smallest angle or closest pivot
         *  to index 0
         */
        if (index!=0) ang[0] = ang[index];
    }
}

void ElleCheckTJAngles(int node, Coords *newxy, Angle_data *ang, int *count)
{
    int i,j,k;
    int nbnodes[3], nbnbnodes[3];
    int found=0;
    double currang, prevang, min, curr;
    double eps;
    double angeps, diff;
    angeps = 0.0087; /* 1deg */
    Coords tmp2, xy, prev;
    ERegion rgn, nbrgns[3];
    /*
     * compare current angle with that before node moved
     * if sign changes, set pvt and nb and angle
     */

    eps = 1.0e-6;
    *count = 0;
    /*ElleNodePrevPosition(node,&prev);*/
    /*ElleNodePlotXY(node,&tmp1,&prev);*/
    ElleNodePosition(node,&prev);
    /*tmp1.x = prev.x + incr->x;*/
    /*tmp1.y = prev.y + incr->y;*/
    ElleNeighbourNodes(node,nbnodes);
    for (i=0;i<3 && *count==0;i++) {
            ElleNodePlotXY(nbnodes[i],&xy,&prev);
            ElleNeighbourRegion(node,nbnodes[i],&rgn);
            found = 0;
            for (j=0;j<3 && !found;j++) {
                ElleNeighbourNodes(nbnodes[j],nbnbnodes);
                ElleRegions(nbnodes[j],nbrgns);
                k=0;
                while (k<3 && (nbnbnodes[k]==NO_NB || nbnbnodes[k]!=node ||
                            nbrgns[k]!=rgn)) k++;
                if (k<3) {
                    found = 1;
                    ElleNodePlotXY(nbnodes[j],&tmp2,&prev);
                    if (angle( newxy->x,newxy->y,xy.x,xy.y,tmp2.x,tmp2.y,
                                                             &currang ))
                        OnNodeError(node,"angle error",0);
                    if (angle( prev.x,prev.y,xy.x,xy.y,tmp2.x,tmp2.y,
                                                             &prevang ))
                        OnNodeError(node,"angle error",0);
                    diff = fabs(currang-prevang);
                    /*if ((fabs(currang-prevang))<PI &&*/
                    if (diff<PI &&
                             ((currang < -eps && prevang > eps) ||
                                  (currang > eps && prevang < -eps) ||
                                   (fabs(currang) < angeps && 
                                   fabs(currang) < fabs(prevang))) ) {
#ifdef DEBUG
                        printf("ang = %lf, prev = %lf\n",currang,prevang);
#endif

                        ang[*count].pivot = node;
                        ang[*count].nb = nbnodes[j]; /* ?? */
                        ang[*count].node = nbnodes[i]; /* ?? */
                        ang[*count].prev_angle = prevang;
                        (*count)++;
                    }
                }
            }
    }
}

int ElleRegionIsSimple(ERegion poly, Intersection *intersect)
{
    int j, k, *id, num_nodes;
    int found=0;
    Coords xy,prev;

    ElleFlynnNodes(poly,&id,&num_nodes);
    ElleNodePosition(id[0],&prev);
    if (num_nodes>3) //can't intersect unless more than 3 sides
        for (j=0;j<num_nodes && !found;j++) {
            k=(j+1)%num_nodes;
            ElleNodePlotXY(id[k],&xy,&prev);
            found=ElleFindIntersection(id[j],id[k],poly,&prev,&xy,intersect);
            prev = xy;
        }
    if (id) free(id);
    return(!found);
}

void InitIntersection(Intersection *intersect)
{
    intersect->node1a=intersect->node2a=intersect->node1b=
                intersect->node2b = NO_NB;
    intersect->xingpt.x = intersect->xingpt.y = 0.0;
    intersect->chk_rgn = NO_NB;
    intersect->pivot = NO_NB;
}

void InitAngleData(Angle_data *ang)
{
    ang->pivot = NO_NB;
    ang->nb = NO_NB;
    ang->node = NO_NB;
    ang->prev_angle = 0;
}

#if XY
void ElleReplaceTripleJ( Intersection *intersect,int *dj,int num)
{
    int node, nbnodes[3], nb, i;
    double eps;
    double diffx, diffy;
    Coords midpt, xy;
    ERegion rgn, nbrgns[3], newrgn;

    eps = 1.0e-6;
    node = intersect->node1a;
    /*ElleNodePosition(node,&xy);*/
    ElleNodePlotXY(node,&xy,&(intersect->xingpt));
    /*
     * if node is very close to crossing point, do nothing
     */
    diffx = xy.x - intersect->xingpt.x;
    diffy = xy.y - intersect->xingpt.y;
    if (fabs(diffx)<eps && fabs(diffy)<eps) {
        fprintf(stderr,"Trouble %d seg %d %d\n",node,
                             intersect->node1b,intersect->node2b);
    }
    else {
        /*
         * find the regions on either side of the crossed segment
         * intersect->chk_rgn is intersect->node1b to intersect->node2b
         */
        ElleNeighbourRegion(intersect->node2b,intersect->node1b,&rgn);
        midpt.x = xy.x - (xy.x - intersect->xingpt.x)*0.9;
        midpt.y = xy.y - (xy.y - intersect->xingpt.y)*0.9;
        if (EllePtInRegion(intersect->chk_rgn,&midpt))
            rgn = intersect->chk_rgn;
        /*
         * find the neighbour for this region
         */
        if ((nb = ElleFindBndNb(node, rgn))==NO_NB)
            OnNodeError(node,"ElleReplaceTripleJ",0);
        ElleInsertDoubleJ(intersect->node1b,intersect->node2b,&dj[0],0.5);
        /*
         * insert and join DJs
         */
        ElleSetPosition(dj[0],&(intersect->xingpt));
        ElleSetPrevPosition(dj[0],&(intersect->xingpt));
        ElleInsertDoubleJ(node,nb,&dj[1],0.1);
        ElleNewGrain(dj[1],dj[0],rgn,&newrgn);
        ElleSwitchTripleNodesForced(dj[1],dj[0]);
    }
}
#endif
